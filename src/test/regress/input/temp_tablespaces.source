create tablespace some_temp_tablespace location '@testtablespace@_temp_tablespace';
create tablespace some_default_tablespace location '@testtablespace@_default_tablespace';

-- Given I've set up GUCS for how to use tablespaces
set temp_tablespaces to some_temp_tablespace;
set default_tablespace to 'some_default_tablespace';

-- When I create a temporary table
create temporary table some_table_in_temp_tablespace (a int);
-- Then the temp_tablespaces settings should be used
select count(1) from pg_class inner join pg_tablespace ON pg_class.reltablespace = pg_tablespace.oid where spcname = 'some_temp_tablespace' AND relname = 'some_table_in_temp_tablespace';

-- And the temp_tablespaces should be used on the segments too
select count(1) from gp_dist_random('pg_class') segment_pg_class inner join pg_tablespace on pg_tablespace.oid = segment_pg_class.reltablespace where relname = 'some_table_in_temp_tablespace' and spcname = 'some_temp_tablespace';

-- When I create a non-temporary table, the default_tablespace should be chosen
create table some_non_temp_table (a int);
select count(1) from pg_class inner join pg_tablespace ON pg_class.reltablespace = pg_tablespace.oid where spcname = 'some_default_tablespace' AND relname = 'some_non_temp_table';

-- And the default_tablespace should be used on the segments too
select count(1) from gp_dist_random('pg_class') segment_pg_class inner join pg_tablespace on pg_tablespace.oid = segment_pg_class.reltablespace where relname = 'some_non_temp_table' and spcname = 'some_default_tablespace';

drop table some_table_in_temp_tablespace;
drop table some_non_temp_table;
drop tablespace some_temp_tablespace;
drop tablespace some_default_tablespace;
reset default_tablespace;
reset temp_tablespaces;

-- When the GUC temp_tablespaces is set, one of the temp tablespaces is used instead of the default tablespace.
-- prepare tablespaces
-- start_ignore
drop tablespace if exists mytempsp0;
drop tablespace if exists mytempsp1;
drop tablespace if exists mytempsp2;
drop tablespace if exists mytempsp3;
drop tablespace if exists mytempsp4;
drop tablespace if exists mytempsp5;
drop tablespace if exists mytempsp6;
drop tablespace if exists mytempsp7;
drop tablespace if exists mytempsp8;
drop tablespace if exists mytempsp9;
-- end_ignore
-- create several tablespaces and use them as temp tablespaces
-- all QD/QEs in one session should have the same temp tablespace
create tablespace mytempsp0 location '@testtablespace@_mytempsp0';
create tablespace mytempsp1 location '@testtablespace@_mytempsp1';
create tablespace mytempsp2 location '@testtablespace@_mytempsp2';
create tablespace mytempsp3 location '@testtablespace@_mytempsp3';
create tablespace mytempsp4 location '@testtablespace@_mytempsp4';
create tablespace mytempsp5 location '@testtablespace@_mytempsp5';
create tablespace mytempsp6 location '@testtablespace@_mytempsp6';
create tablespace mytempsp7 location '@testtablespace@_mytempsp7';
create tablespace mytempsp8 location '@testtablespace@_mytempsp8';
create tablespace mytempsp9 location '@testtablespace@_mytempsp9';
-- temp_tablespaces will synchronized to all segments
set temp_tablespaces=mytempsp0,mytempsp1,mytempsp2,mytempsp3,mytempsp4,mytempsp5,mytempsp6,mytempsp7,mytempsp8,mytempsp9;

CREATE OR REPLACE FUNCTION gp_tablespace_inotify_cmd(cmd text, name text, param text)
    RETURNS void
    EXECUTE ON ALL SEGMENTS
AS '@abs_builddir@/regress.so', 'gp_tablespace_inotify_cmd'
    LANGUAGE C;

CREATE OR REPLACE FUNCTION gp_tablespace_inotify_cmd(cmd text, name text)
    RETURNS void
    EXECUTE ON ALL SEGMENTS
AS $$ select gp_tablespace_inotify_cmd($1, $2, '') $$
    LANGUAGE SQL;

CREATE OR REPLACE FUNCTION gp_tablespace_inotify_cmd(cmd text)
    RETURNS void
    EXECUTE ON ALL SEGMENTS
AS $$ select gp_tablespace_inotify_cmd($1, '', '') $$
    LANGUAGE SQL;

CREATE OR REPLACE FUNCTION gp_tablespace_inotify_match(name text, param text)
    RETURNS int
    EXECUTE ON ALL SEGMENTS
AS '@abs_builddir@/regress.so', 'gp_tablespace_inotify_match'
    LANGUAGE C;

CREATE OR REPLACE FUNCTION gp_temptablespace_path(tblspcOid Oid)
    RETURNS text
    EXECUTE ON ALL SEGMENTS
AS '@abs_builddir@/regress.so', 'gp_tablespace_tmppath'
    LANGUAGE C;

-- set small statement_mem, so temp files are generated by some operations,
-- like join/agg/share input scan, etc.
set statement_mem = '2MB';

-- init the inotify module to watch the creation of files for some directories later.
select gp_tablespace_inotify_cmd('init0');
select dattablespace from pg_database where datname=current_database();

-- show the directories for the default tablespace and temp tablespace.
-- start_ignore
select gp_temptablespace_path((select dattablespace from pg_database where datname=current_database() limit 1));
select gp_temptablespace_path(0);
-- end_ignore
-- watch the directories for creation of files under the default tablespace or temp tablespace
select gp_tablespace_inotify_cmd('add', 'default', gp_temptablespace_path((select dattablespace from pg_database where datname=current_database() limit 1)));
-- gp_temptablespace_path(0) will calculate the temp tablespace that will be used as we expected.
select gp_tablespace_inotify_cmd('add', 'temp', gp_temptablespace_path(0));


-- ShareInputScan across multiple slices, they should access the same
-- temp tablespace.
CREATE TABLE tts_foo (a int, b int) distributed by(a);
CREATE TABLE tts_bar (c int, d int) distributed by(d);
CREATE TABLE tts_jazz(e int, f int) distributed by(e);

insert into tts_foo select i, i from generate_series(1,1000000)i;
insert into tts_bar select i, i from generate_series(6000,120000)i;
insert into tts_jazz select i, i from generate_series(4000,150000)i;

ANALYZE tts_foo;
ANALYZE tts_bar;
ANALYZE tts_jazz;

with out11 as (
    SELECT * FROM (
      WITH cte(a,b) AS (SELECT a-1, b+1 FROM tts_foo)
      SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte) AS X JOIN tts_bar ON b = c
	  UNION ALL SELECT *, 1, 2 FROM cte
    ) AS XY
    JOIN tts_jazz on c = e AND b = f
)
select count(*) from out11;

-- checkout temp tablespaces. After this point, the created files are collected.
select gp_tablespace_inotify_cmd('checkout');

-- check that the one of temp tablespace specified by GUC is used
-- and no files for hash-join or share-input-scan is generated in the default tablespace
select gp_tablespace_inotify_match('default', '_HashJoin') > 0 as "exist";
select gp_tablespace_inotify_match('temp', '_HashJoin') > 0 as "exist";
select gp_tablespace_inotify_cmd('clear', '*');
-- after clear, the following match should return false
select gp_tablespace_inotify_match('default', '_HashJoin') > 0 as "exist";
select gp_tablespace_inotify_match('temp', '_HashJoin') > 0 as "exist";

-- SIRW doesn't happen when the optimizer is off in the above case.
set optimizer = on;
with out11 as (
    SELECT * FROM (
      WITH cte(a,b) AS (SELECT a, b FROM tts_foo)
      SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte) AS X JOIN tts_bar ON b = c
	  UNION ALL SELECT *, 1, 2 FROM cte
    ) AS XY
    JOIN tts_jazz on c = e AND b = f
)
select count(*) from out11;

select gp_tablespace_inotify_cmd('checkout');
select gp_tablespace_inotify_match('default', '_HashJoin') > 0 as "exist";
select gp_tablespace_inotify_match('temp', '_HashJoin') > 0 as "exist";
select gp_tablespace_inotify_match('default', '_SIRW_') > 0 as "exist";
select gp_tablespace_inotify_match('temp', '_SIRW_') > 0 as "exist";
select gp_tablespace_inotify_cmd('clear', '*');

reset optimizer;
-- HashAggregate doesn't appear
select gp_tablespace_inotify_match('default', '_HashAggregate_') > 0 as "exist";
select gp_tablespace_inotify_match('temp', '_HashAggregate_') > 0 as "exist";
with cte as (
  select count(1) from tts_jazz group by f
)
select count(1) from cte;

select gp_tablespace_inotify_cmd('checkout');
-- temp files in hash aggregate should reside in the temp tablespace.
select gp_tablespace_inotify_match('default', '_HashAggregate_') > 0 as "exist";
select gp_tablespace_inotify_match('temp', '_HashAggregate_') > 0 as "exist";

reset optimizer;

-- After we unset temp_tablespaces, the temp files should be generated in the default tablespace
set temp_tablespaces to '';
show temp_tablespaces;
select gp_tablespace_inotify_cmd('clear', '*');
with out11 as (
    SELECT * FROM (
      WITH cte(a,b) AS (SELECT a-1, b+1 FROM tts_foo)
      SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte) AS X JOIN tts_bar ON b = c
	  UNION ALL SELECT *, 1, 2 FROM cte
    ) AS XY
    JOIN tts_jazz on c = e AND b = f
)
select count(*) from out11;

-- checkout temp tablespaces. After this point, the created files are collected.
select gp_tablespace_inotify_cmd('checkout');

-- check that the one of temp tablespace specified by GUC is used
-- and no files for hash-join or share-input-scan is generated in the default tablespace
select gp_tablespace_inotify_match('default', '_HashJoin') > 0 as "exist";
select gp_tablespace_inotify_match('temp', '_HashJoin') > 0 as "exist";
select gp_tablespace_inotify_cmd('clear', '*');
-- after clear, the following match should return false
select gp_tablespace_inotify_match('default', '_HashJoin') > 0 as "exist";
select gp_tablespace_inotify_match('temp', '_HashJoin') > 0 as "exist";

-- SIRW doesn't happen when the optimizer is off in the above case.
set optimizer = on;
with out11 as (
    SELECT * FROM (
      WITH cte(a,b) AS (SELECT a, b FROM tts_foo)
      SELECT * FROM (SELECT * FROM cte UNION ALL SELECT * FROM cte) AS X JOIN tts_bar ON b = c
	  UNION ALL SELECT *, 1, 2 FROM cte
    ) AS XY
    JOIN tts_jazz on c = e AND b = f
)
select count(*) from out11;

select gp_tablespace_inotify_cmd('checkout');
select gp_tablespace_inotify_match('default', '_HashJoin') > 0 as "exist";
select gp_tablespace_inotify_match('temp', '_HashJoin') > 0 as "exist";
select gp_tablespace_inotify_match('default', '_SIRW_') > 0 as "exist";
select gp_tablespace_inotify_match('temp', '_SIRW_') > 0 as "exist";
select gp_tablespace_inotify_cmd('clear', '*');

reset optimizer;
-- HashAggregate doesn't appear
select gp_tablespace_inotify_match('default', '_HashAggregate_') > 0 as "exist";
select gp_tablespace_inotify_match('temp', '_HashAggregate_') > 0 as "exist";
with cte as (
  select count(1) from tts_jazz group by f
)
select count(1) from cte;

select gp_tablespace_inotify_cmd('checkout');
-- temp files in hash aggregate should reside in the temp tablespace.
select gp_tablespace_inotify_match('default', '_HashAggregate_') > 0 as "exist";
select gp_tablespace_inotify_match('temp', '_HashAggregate_') > 0 as "exist";

-- stop to watch inotify events and release resources
select gp_tablespace_inotify_cmd('exit');

reset statement_mem;
drop table tts_foo, tts_bar, tts_jazz;
drop function gp_tablespace_inotify_cmd(text) cascade;
drop function gp_tablespace_inotify_cmd(text, text) cascade;
drop function gp_tablespace_inotify_cmd(text, text, text) cascade;
drop function gp_tablespace_inotify_match(text, text) cascade;
drop tablespace mytempsp0;
drop tablespace mytempsp1;
drop tablespace mytempsp2;
drop tablespace mytempsp3;
drop tablespace mytempsp4;
drop tablespace mytempsp5;
drop tablespace mytempsp6;
drop tablespace mytempsp7;
drop tablespace mytempsp8;
drop tablespace mytempsp9;
